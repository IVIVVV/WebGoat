In here i will focus mainly on how http response splitting works and how it can be used to carry out some other attacks

1. First lets talk about what this is.
- So http is a protocol used to help clients and server interact with each other. The clients send a request and the server will response with a result, 
this result normaly would be known from the server or else the server would response with the 404 code. Since there is a chain between the client and 
server, hackers will always find a way to make use of it
- Http response splitting is when the client send 1 request, along with more than 1 responses set by the client to the server in which one of the request 
is a legit request while others are malicious.
- Http response splitting can be used to carry out attacks such as web cache poisoning, cross user defacement, hijacking 
pages with sensitive user information and an old favorite, cross-site scripting

*NOTE:
**** The HTTP response splitting vulnerability is not the attack, it is simply the path that makes the attack possible
+ Cross user defacement enables the attacker to forge a page that is sent to the victim. It 
can be looked at as a very localized and temporary kind of defacement, which affects 
one user at a time. 
+ Web cache poisoning elevates that defacement into a permanent effect on a more global scope by forging a cached page in a cache server shared 
among a multitude of site users. 
+ Hijacking pages with sensitive user information lets the attacker gain access to user specific information provided by the server such as 
health records or financial data. 
+ Cross-site scripting enables the attacker to steal other client’s credentials that are then used in conjunction with the vulnerable site

2. So how does it work?
- Let's say when sending 1 request with 2 repsonse to the server, the first requset is a legit one and lead to some branches of the server and the second
one contains some malicious content.
- The essence of HTTP Response Splitting is the attacker’s ability to send a single HTTP request that forces the web server to form an 
output stream, which is then interpreted by the target as two HTTP responses instead of one response
- But if this second response doesnt have any request to map to it would just be hanging there.
- In order for this to work, the attacker must be behind a proxy server then pass their requests to the server. But that's not all, not only the attacker needs 
to be behind a proxy server but also the target, behind the same proxy server
- This is how the attack goes:
+ the Attacker sends a request which contains a value and 2 responses, separated by %0d%0a (aka CRLF) 
+ The request is sent to the server DNS but it passes through the intermediate proxy server. 
Now on the proxy server, the first request is mapped to the first response. The second response hangs very briefly as there is no matching request
+ Immediately after sending the first request the attacker sends a new request(2nd request) to the site (and hence through the proxy server as well)
+ The moment the proxy sees the request for branches.html it maps it to the second response

=> So a future request for the server's branch will NOT display that server's branch but the malicious page instead. For everyone. Not just the attacker!

3. How to pull it off?
- HTTP Response Splitting attacks take place where the server script embeds user data in HTTP response headers.
+ This typically happens when the script embeds user data in the redirection URL of a redirection response (HTTP status code 3xx), or when the 
script embeds user data in a cookie value or name when the response sets a cookie. 
- Once confirm the server is vulnerable just send a scrypt as follow:
HTTP/1.1 200 OK
Content-Type: text/html
//poison//
Content-Length: 31
//anything//

- The dangerous part is the "anything"
*Note remember to encrypt this into url, you can use this link to encode the script: https://cybersecurity.wtf/encoder/






